server {
  root /var/www/dealer;

  server_name api.evergreen.filecoin.io;

  add_header Cache-Control "no-store, max-age=0";

  real_ip_header X-Forwarded-For;
  real_ip_recursive on;

  gzip on;
  gzip_types text/plain text/css application/json;
  gzip_proxied any;
  gzip_vary on;
  gzip_min_length 256;
  gzip_comp_level 9;

  # public/* is a-ok
  location ~ ^/public(?:/.*)?$ {
    allow all;
  }

  # sigh.
  location /favicon.ico {
    return 204;
    access_log     off;
    log_not_found  off;
  }

  # Strip trailing /
  location ~ ^(.+)/$ {
    error_page 301 /default_non_2xx_body.json;
    return 301 $scheme://$host$1;
  }

  # only hit the app if we recognize the request
  location ~ ^/(?:eligible_pieces/(?:sp_local|anywhere)|request_piece/.+|pending_proposals)$ {

    # short-circuit 401 if header absent
    include /var/www/dealer/unauth_short_circuit.conf;

    # special case these so that we output a placeholder at all times
    # especially important for 400, as golang's http error handler isn't json
    error_page 400 500 502 /default_app_error_body.json;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_intercept_errors on;
    proxy_pass http://127.0.0.1:8080;
  }

  # for everything else serve an unknwon
  location / {
    # short-circuit 401 if header absent
    include /var/www/dealer/unauth_short_circuit.conf;

    error_page 403 /default_non_2xx_body.json;
    return 403;
  }

  # SSI for error messages
  location ~ ^/default_(?:non_2xx|unauthorized|app_error)_body.json$ {
    internal;
    allow all;
    ssi on;
    ssi_types *;
    add_header WWW-Authenticate: FIL-SPID-V0 always;
  }
}
